?sapply
## zillow word tag#
library(foreach)#
library(doMC)#
library(xlsx)#
setwd("/Users/dnoriega/Documents/Github/zillow_projects/data")#
## set up multicore usage#
registerDoMC(detectCores())#
#
## functions#
# trim leading and trailing whitespace#
trim <- function(x) {#
	gsub("^\\s+|\\s+$", "", x, perl=TRUE)#
}#
#
# input table#
inputdata <- function(y) {#
	x = read.table(y, as.is = TRUE, sep = "\t")#
	x <- x[,c(1,3)] # subset dataframe x all rows, columns 1 and 3  #
	names(x) <- c("id","word") # rename data variable names#
	x.sample <- x[sample(nrow(x),size=100), 1:ncol(x)] # sample n = 100 from all rows in both columns#
	x$word <- trim(x$word) # trim whitespace from words#
	return(x)#
}#
#
## input data#
# get corpus (all hhids and decriptions)#
corpus = read.csv("/Users/dnoriega/Dropbox/SolarHedonic/Dan/text analysis/atype76.csv", header = TRUE)#
corpus.sample <- corpus[sample(nrow(corpus),size=10000), 1:ncol(corpus)] # sample n = 100 from all rows in both columns#
corpus.sample <- data.frame(corpus.sample[do.call(order, corpus.sample), ], row.names = seq_along(1:dim(corpus.sample)[1])) # order data frame by first column (pid)#
#
# get ngram data#
unigrams <- inputdata("zillow_uni_sample.txt")#
bigrams <- inputdata("zillow_bi_sample.txt")#
# words of interest#
words = read.table("zillow_words_of_interest.txt",sep="\n")#
words <- c(t(as.matrix(words))) # combine a transpose of matrix column text data#
#
## find all households with words of interest then remove duplicates hhids and match hhids to corpus#
hhid <- data.frame() # initialize empty data frame #
#
hhid1 <- subset(unigrams, match(unigrams$word,words,nomatch=0) > 0)#
hhid2 <- subset(bigrams, match(bigrams$word,words,nomatch=0) > 0)#
hhid <- rbind(hhid1,hhid2)#
hhid <- unique(sort(hhid$id)) # remove duplicates and sort#
#
## match hhids to corpus, extract descriptions#
hhid.match <- data.frame()#
stime <- proc.time()#
hhid.match <- subset(corpus, match(corpus$pid,hhid,nomatch=0) > 0)#
stime <- proc.time() - stime#
print(stime)#
write.xlsx(hhid.match,"zillow_word_tag.xlsx",row.names = FALSE)
### MC TEST#
hhid.match2 <- data.frame()#
hhid.matrix <- hhid#
dim(hhid.matrix) <- c(ceiling(length(hhid)/detectCores()),detectCores())
apply(hhid.matrix,2, function(x) subset(corpus, match(corpus$pid, x, nomatch=0) > 0))
q <- apply(hhid.matrix,2, function(x) subset(corpus, match(corpus$pid, x, nomatch=0) > 0))
dim(q)
attributes(q)
q
q <- apply(hhid.matrix,2, function(x) x <- subset(corpus, match(corpus$pid, x, nomatch=0) > 0) ; x)
q <- apply(hhid.matrix,2, function(x) x <- subset(corpus, match(corpus$pid, x, nomatch=0) > 0))
dim(q)
q <- data.frame()
q <- apply(hhid.matrix,2, function(x) subset(corpus, match(corpus$pid, x, nomatch=0) > 0))
q[1]
class(q)
class(q,mode)
mode(q)
q <- apply(hhid.matrix,2, function(x) subset(corpus, match(corpus$pid, x, nomatch=0) > 0))
mode(q)
attributes(q)
class(q)
names(q)
?factor
dim(q)
length(q)
install.packages("parallel")
install.packages("multicore")
library(multicore)
ptime <- proc.time()#
p <- pvec(hhid, hh.match)#
ptime <- proc.time() - ptime#
print(ptime)
hhid.match <- data.frame()#
stime <- proc.time()#
hhid.match <- subset(corpus, match(corpus$pid,hhid,nomatch=0) > 0)#
stime <- proc.time() - stime#
print(stime)
mode(p)
ptime <- proc.time()#
p <- pvec(hhid, hh.match)#
ptime <- proc.time() - ptime#
print(ptime)
p
hh.match <- function(x) {#
	p <- subset(corpus, match(corpus$pid,x,nomatch=0))#
	return(p)#
}
ptime <- proc.time()#
p <- pvec(hhid, hh.match)#
ptime <- proc.time() - ptime#
print(ptime)
hh.match <- function(x) {#
	subset(corpus, match(corpus$pid,x,nomatch=0))	#
}
ptime <- proc.time()#
p <- pvec(hhid, hh.match)#
ptime <- proc.time() - ptime#
print(ptime)
mode(p)
attributes(p)
class(p)
p
hh.match <- function(x) {#
	subset(corpus, match(corpus$pid,x,nomatch=0) > 0)	#
}
ptime <- proc.time()#
p <- pvec(hhid, hh.match)#
ptime <- proc.time() - ptime#
print(ptime)
hh.match <- function(x) {#
	match(corpus$pid,x,nomatch=0)	#
}
ptime <- proc.time()#
p <- pvec(hhid, hh.match)#
ptime <- proc.time() - ptime#
print(ptime)
p
ptime <- proc.time()#
p <- pvec(hhid, hh.match)#
q <- subset(corpus, p > 0)#
ptime <- proc.time() - ptime#
print(ptime)
q
head(q)
stime <- proc.time()#
hhid.match <- subset(corpus, match(corpus$pid,hhid,nomatch=0) > 0)#
stime <- proc.time() - stime#
print(stime)
ptime <- proc.time()#
p <- pvec(hhid, hh.match)#
q <- subset(corpus, p > 0)#
ptime <- proc.time() - ptime#
print(ptime)
ptime <- proc.time()#
p <-  subset(corpus, pvec(hhid, hh.match) > 0)#
ptime <- proc.time() - ptime#
print(ptime)
ptime <- proc.time()#
p <- pvec(hhid, hh.match)#
q <- subset(corpus, p > 0)#
ptime <- proc.time() - ptime#
print(ptime)
dim(p)
mode(p)
p[1]
length(p)
length(hhid)
hh.match <- function(x, data) {#
	match(data,x,nomatch=0)	#
}
ptime <- proc.time()#
p <- pvec(hhid, hh.match, data = corpus$pid)#
q <- subset(corpus, p > 0)#
ptime <- proc.time() - ptime#
print(ptime)
p
dim(q)
dim(corpus)
length(p)
dim(corpus)[1]*dim(corpus)[2]
dim(q)
dim(hhid.match)
identical(q,hhid.match)
head(q)
head(hhid.match)
attributes(q)
attributes(hhid.match)
hh.match <- function(x) {#
	match(corpus$pid),x,nomatch=0)	#
}
hh.match <- function(x) {#
	match(corpus$pid,x,nomatch=0)	#
}
ptime <- proc.time()#
p <- pvec(hhid, hh.match#
q <- subset(corpus, p > 0)#
ptime <- proc.time() - ptime#
print(ptime)
ptime <- proc.time()#
p <- pvec(hhid, hh.match)#
q <- subset(corpus, p > 0)#
ptime <- proc.time() - ptime#
print(ptime)
q
attributes(q)
attributes(p)
tail(p)
head(p)
p
length(p)
ptime <- proc.time()#
p <- pvec(hhid, hh.match)#
q <- subset(corpus, c(p) > 0)#
ptime <- proc.time() - ptime#
print(ptime)
tail(q)
mc.cores
as.integer(mc.cores)
getOption("mc.cores")
getOption("mcores")
getOption("cores")
hh.match <- function(x,d1,d2) {#
	match(d1,d2[,x],nomatch=0)	#
}
ptime <- proc.time()#
p <- pvec(1:2, hh.match, d1 = corpus$pid, d2 = hhid.matrix )#
q <- subset(corpus, c(p) > 0)#
ptime <- proc.time() - ptime#
print(ptime)
q
tail(q)
hhid.matrix[,1]
?lis
?list
list(hhid.matrix[,1])
list(hhid.matrix[,1], hhid.matrix[,2])
q <- list(hhid.matrix[,1], hhid.matrix[,2])
mode(q)
dim(q)
q[1]
hh.match <- function(x,d1,d2) {#
	q <- match(d1,d2[,x],nomatch=0)	#
}
p[1:2] <- pvec(1:2, hh.match, d1 = corpus$pid, d2 = hhid.matrix )
p <- pvec(1:2, hh.match, d1 = corpus$pid, d2 = hhid.matrix )
hh.match <- function(x,d1,d2) {#
	match(d1,d2[x],nomatch=0)	#
}
p <- pvec(1:2, hh.match, d1 = corpus$pid, d2 = hh.list )
p
hh.list <- list(hhid.matrix[,1], hhid.matrix[,2])
p <- pvec(1:2, hh.match, d1 = corpus$pid, d2 = hh.list )
tail(p)
q <- subset(corpus, p > 0)
tail(q)
p
